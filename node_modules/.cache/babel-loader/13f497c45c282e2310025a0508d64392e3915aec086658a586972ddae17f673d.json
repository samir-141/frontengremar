{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jhone\\\\OneDrive\\\\Escritorio\\\\AppGremar\\\\frontend\\\\src\\\\components\\\\StudentData.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport '../css/app.css';\nimport EditModal from \"../components/model\";\nimport StudentTable from \"./StudentTable\";\nimport Pagination from \"./Pagination\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function StudentData({\n  URL\n}) {\n  _s();\n  const [data, setData] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [nombre, setNombre] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedStudent, setSelectedStudent] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const studentsPerPage = 40;\n\n  // Obtener todos los estudiantes\n  const fetchData = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(`${URL}student/`);\n      if (!response.ok) throw new Error(\"Error al obtener los datos\");\n      const result = await response.json();\n      setData(result);\n    } catch (error) {\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Filtrar por nombre\n  const fetchFiltro = async nombre => {\n    try {\n      const response = await fetch(`${URL}student/BUSCAR?nombre=${nombre}`);\n      if (!response.ok) throw new Error(\"Error al obtener los datos\");\n      const result = await response.json();\n      setData(result);\n    } catch (error) {\n      setError(error.message);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, [URL]);\n  const handleChange = event => {\n    const nombre = event.target.value;\n    setNombre(nombre);\n    nombre.trim() ? fetchFiltro(nombre) : fetchData();\n    setCurrentPage(1);\n  };\n  // Función para descargar el archivo Excel\n  const handleExportExcel = () => {\n    window.location.href = `${URL}exportar-excel`; // Redirige al endpoint del backend\n  };\n  const handleView = student => {\n    setSelectedStudent(student);\n    setIsModalOpen(true);\n  };\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n    setSelectedStudent(null);\n  };\n\n  // Función para actualizar los datos en el estado local\n  const handleUpdate = updatedStudent => {\n    const updatedData = data.map(student => student.id === updatedStudent.id ? updatedStudent : student);\n    setData(updatedData); // Actualiza el estado con los datos modificados\n  };\n  const handleDelete = id => alert(`Eliminar estudiante con ID: ${id}`);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Cargando datos...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    style: {\n      color: \"red\"\n    },\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 23\n  }, this);\n  const indexOfLastStudent = currentPage * studentsPerPage;\n  const indexOfFirstStudent = indexOfLastStudent - studentsPerPage;\n  const currentStudents = data.slice(indexOfFirstStudent, indexOfLastStudent);\n  const totalPages = Math.ceil(data.length / studentsPerPage);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Datos del Estudiante\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex gap-2 mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: nombre,\n        onChange: handleChange,\n        placeholder: \"Escribe el nombre...\",\n        className: \"input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button button-primary\",\n        onClick: () => alert(\"Agregar nuevo estudiante\"),\n        children: \"Agregar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button button-primary\",\n        onClick: () => handleExportExcel(),\n        children: \"Exportar EXCEL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(StudentTable, {\n      students: currentStudents,\n      onView: handleView,\n      onDelete: handleDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      currentPage: currentPage,\n      totalPages: totalPages,\n      onPageChange: setCurrentPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), isModalOpen && selectedStudent && /*#__PURE__*/_jsxDEV(EditModal, {\n      data: selectedStudent,\n      onClose: handleCloseModal,\n      onSave: handleUpdate // Pasamos la función para actualizar los datos\n      ,\n      URL: URL\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n}\n_s(StudentData, \"muvjFmJhzCI0nodu6ZIMkw4UDSg=\");\n_c = StudentData;\nvar _c;\n$RefreshReg$(_c, \"StudentData\");","map":{"version":3,"names":["useState","useEffect","EditModal","StudentTable","Pagination","jsxDEV","_jsxDEV","StudentData","URL","_s","data","setData","error","setError","loading","setLoading","nombre","setNombre","currentPage","setCurrentPage","selectedStudent","setSelectedStudent","isModalOpen","setIsModalOpen","studentsPerPage","fetchData","response","fetch","ok","Error","result","json","message","fetchFiltro","handleChange","event","target","value","trim","handleExportExcel","window","location","href","handleView","student","handleCloseModal","handleUpdate","updatedStudent","updatedData","map","id","handleDelete","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","indexOfLastStudent","indexOfFirstStudent","currentStudents","slice","totalPages","Math","ceil","length","className","type","onChange","placeholder","onClick","students","onView","onDelete","onPageChange","onClose","onSave","_c","$RefreshReg$"],"sources":["C:/Users/jhone/OneDrive/Escritorio/AppGremar/frontend/src/components/StudentData.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport '../css/app.css';\r\nimport EditModal from \"../components/model\";\r\nimport StudentTable from \"./StudentTable\";\r\nimport Pagination from \"./Pagination\";\r\n\r\nexport default function StudentData({ URL }) {\r\n    const [data, setData] = useState([]);\r\n    const [error, setError] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [nombre, setNombre] = useState(\"\");\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [selectedStudent, setSelectedStudent] = useState(null);\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const studentsPerPage = 40;\r\n\r\n    // Obtener todos los estudiantes\r\n    const fetchData = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const response = await fetch(`${URL}student/`);\r\n            if (!response.ok) throw new Error(\"Error al obtener los datos\");\r\n            const result = await response.json();\r\n            setData(result);\r\n        } catch (error) {\r\n            setError(error.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // Filtrar por nombre\r\n    const fetchFiltro = async (nombre) => {\r\n        try {\r\n            const response = await fetch(`${URL}student/BUSCAR?nombre=${nombre}`);\r\n            if (!response.ok) throw new Error(\"Error al obtener los datos\");\r\n            const result = await response.json();\r\n            setData(result);\r\n        } catch (error) {\r\n            setError(error.message);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, [URL]);\r\n\r\n    const handleChange = (event) => {\r\n        const nombre = event.target.value;\r\n        setNombre(nombre);\r\n        nombre.trim() ? fetchFiltro(nombre) : fetchData();\r\n        setCurrentPage(1);\r\n    };\r\n    // Función para descargar el archivo Excel\r\n    const handleExportExcel = () => {\r\n        window.location.href = `${URL}exportar-excel`; // Redirige al endpoint del backend\r\n    };\r\n    const handleView = (student) => {\r\n        setSelectedStudent(student);\r\n        setIsModalOpen(true);\r\n    };\r\n\r\n    const handleCloseModal = () => {\r\n        setIsModalOpen(false);\r\n        setSelectedStudent(null);\r\n    };\r\n\r\n    // Función para actualizar los datos en el estado local\r\n    const handleUpdate = (updatedStudent) => {\r\n        const updatedData = data.map((student) =>\r\n            student.id === updatedStudent.id ? updatedStudent : student\r\n        );\r\n        setData(updatedData); // Actualiza el estado con los datos modificados\r\n    };\r\n\r\n    const handleDelete = (id) => alert(`Eliminar estudiante con ID: ${id}`);\r\n\r\n    if (loading) return <p>Cargando datos...</p>;\r\n    if (error) return <p style={{ color: \"red\" }}>Error: {error}</p>;\r\n\r\n    const indexOfLastStudent = currentPage * studentsPerPage;\r\n    const indexOfFirstStudent = indexOfLastStudent - studentsPerPage;\r\n    const currentStudents = data.slice(indexOfFirstStudent, indexOfLastStudent);\r\n    const totalPages = Math.ceil(data.length / studentsPerPage);\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1>Datos del Estudiante</h1>\r\n            <div className=\"flex gap-2 mb-4\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={nombre}\r\n                    onChange={handleChange}\r\n                    placeholder=\"Escribe el nombre...\"\r\n                    className=\"input\"\r\n                />\r\n                <button className=\"button button-primary\" onClick={() => alert(\"Agregar nuevo estudiante\")}>Agregar</button>\r\n                <button className=\"button button-primary\" onClick={() => handleExportExcel()}>Exportar EXCEL</button>\r\n            </div>\r\n\r\n            <StudentTable\r\n                students={currentStudents}\r\n                onView={handleView}\r\n                onDelete={handleDelete}\r\n            />\r\n\r\n            <Pagination\r\n                currentPage={currentPage}\r\n                totalPages={totalPages}\r\n                onPageChange={setCurrentPage}\r\n            />\r\n\r\n            {isModalOpen && selectedStudent && (\r\n                <EditModal\r\n                    data={selectedStudent}\r\n                    onClose={handleCloseModal}\r\n                    onSave={handleUpdate} // Pasamos la función para actualizar los datos\r\n                    URL={URL}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}